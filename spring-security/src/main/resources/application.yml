spring:
  profiles.active: default

# = Default Profiles
---
spring:
  profiles: default
  profiles.include: app-common,db-common

# Application
server:
  port: 8899

# Datasource
spring.datasource:
  # Connection url for the database "netgloo_blog"
  url: jdbc:mysql://192.168.56.101:3306/bimserver?useSSL=false&autoReconnect=true&useUnicode=true&characterEncoding=utf-8
  # Username and password
  username: root
  password: root

# = Test Profiles
---
spring:
  profiles: test
  profiles.include: app-common,db-test

# Application
server:
  port: 18899

# Datasource
spring.4:
  # Connection url for the database "netgloo_blog"
  url: jdbc:h2:mem:AZ;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
  # Username and password
  username: sa
  password: 

# = Common Profiles
# Application Common
---
spring:
  profiles: app-common
  
server:
  display-name: Spring Security

# Database Common
---
spring:
  profiles: db-common

# ===============================
# = DATA SOURCE
# ===============================
spring.datasource:
  driverClassName: com.mysql.jdbc.Driver
  dbcp.maxActive: 20
  dbcp.max-idle: 8
  dbcp.min-idle: 8
  dbcp.initial-size: 10
  # Keep the connection alive if idle for a long time (needed in production)
  dbcp.testWhileIdle:  true
  dbcp.validationQuery:  SELECT 1


# ====: ==========================
# = JPA / HIBERNATE
# ===============================
spring.jpa:
  # Use spring.jpa.properties.* for Hibernate native properties (the prefix is
  # stripped before adding them to the entity manager).
  # Specify the DBMS
  database: MYSQL
  # Show or not log for each sql query
  show-sql: true

  # Hibernate ddl auto (create, create-drop, update): with "update" the database
  # schema will be automatically updated accordingly to java entities found in
  # the project
  hibernate.ddl-auto: update
  # hibernate.ddl-auto: create-drop
  # Naming strategy
  hibernate.naming.strategy: org.hibernate.cfg.ImprovedNamingStrategy

  # Show or not log for each sql query
  properties.hibernate.show_sql: true

  # Put comments inside all generated SQL statements to hint what\u2019s the generated SQL trying to do
  properties.hibernate.use_sql_comments: true

  # Pretty formatted sql in log
  properties.hibernate.format_sql: true
  
# Database test
---
spring:
  profiles: db-test

# ===============================
# = DATA SOURCE
# ===============================
spring.datasource:
  # Custom configuration
  schema: import.sql
  sql-script-encoding: utf-8

  driverClassName: org.h2.Driver
  dbcp.maxActive: 20
  dbcp.max-idle: 8
  dbcp.min-idle: 8
  dbcp.initial-size: 10
  # Keep the connection alive if idle for a long time (needed in production)
  dbcp.testWhileIdle:  true
  dbcp.validationQuery:  SELECT 1
  #schema: classpath:auth-test-schema.sql
  #data: classpath:auth-test-data.sql


# ====: ==========================
# = JPA / HIBERNATE
# ===============================
spring.jpa:
  # Use spring.jpa.properties.* for Hibernate native properties (the prefix is
  # stripped before adding them to the entity manager).
  # Specify the DBMS
  database: H2
  # Show or not log for each sql query
  show-sql: true
  database-platform: org.hibernate.dialect.H2Dialect
  # Hibernate ddl auto (create, create-drop, update): with "update" the database
  # schema will be automatically updated accordingly to java entities found in
  # the project
  hibernate.ddl-auto: update

  # Naming strategy
  hibernate.naming.strategy: org.hibernate.cfg.ImprovedNamingStrategy

  # Show or not log for each sql query
  properties.hibernate.show_sql: true

  # Put comments inside all generated SQL statements to hint what\u2019s the generated SQL trying to do
  properties.hibernate.use_sql_comments: true

  # Pretty formatted sql in log
  properties.hibernate.format_sql: true